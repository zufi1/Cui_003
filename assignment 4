APIContext.js
 
import React, { createContext, useState, useContext } from 'react';
import axios from 'axios';
 
const ApiContext = createContext();
 
export const ApiProvider = ({ children }) => {
 const [randomQuote, setRandomQuote] = useState(null);
 const [searchedQuotes, setSearchedQuotes] = useState([]);
 const [updatedData, setUpdatedData] = useState(null);
 const [loading, setLoading] = useState(false);
 const [error, setError] = useState(null);
 
 // GET Request - Get random quote
 const getRandomQuote = async () => {
   setLoading(true);
   try {
     const response = await axios.get('https://api.quotable.io/random');
     setRandomQuote(response.data);
     setError(null);
   } catch (err) {
     setError('Failed to fetch random quote');
   } finally {
     setLoading(false);
   }
 };
 
 // POST Request - Search quotes (Quotable API uses POST for search)
 const searchQuotes = async (query) => {
   setLoading(true);
   try {
     const response = await axios.post('https://api.quotable.io/search/quotes', {
       query,
       limit: 5
     });
     setSearchedQuotes(response.data.results);
     setError(null);
   } catch (err) {
     setError('Failed to search quotes');
   } finally {
     setLoading(false);
   }
 };
 
 // Simulated PUT Request (since Quotable doesn't have a real PUT endpoint)
 const simulatePutRequest = async () => {
   setLoading(true);
   try {
     // This is a simulation - in a real app, you'd call an actual PUT endpoint
     await new Promise(resolve => setTimeout(resolve, 1000));
     const mockResponse = {
       status: 'success',
       message: 'Data updated successfully (simulated)',
       updatedAt: new Date().toISOString()
     };
     setUpdatedData(mockResponse);
     setError(null);
   } catch (err) {
     setError('Failed to update data');
   } finally {
     setLoading(false);
   }
 };
 
 return (
   <ApiContext.Provider
     value={{
       randomQuote,
       searchedQuotes,
       updatedData,
       loading,
       error,
       getRandomQuote,
       searchQuotes,
       simulatePutRequest,
     }}
   >
     {children}
   </ApiContext.Provider>
 );
};
 
export const useApi = () => useContext(ApiContext);
 
 
SensorContext.js
 
import React, { createContext, useState, useEffect, useContext } from 'react';
import { Accelerometer } from 'expo-sensors';
 
const SensorContext = createContext();
 
export const SensorProvider = ({ children }) => {
 const [accelerometerData, setAccelerometerData] = useState({
   x: 0,
   y: 0,
   z: 0,
 });
 const [subscription, setSubscription] = useState(null);
 
 const subscribe = () => {
   setSubscription(
     Accelerometer.addListener(accelerometerData => {
       setAccelerometerData(accelerometerData);
     })
   );
   Accelerometer.setUpdateInterval(1000); // Update every second
 };
 
 const unsubscribe = () => {
   subscription && subscription.remove();
   setSubscription(null);
 };
 
 useEffect(() => {
   subscribe();
   return () => unsubscribe();
 }, []);
 
 return (
   <SensorContext.Provider
     value={{
       accelerometerData,
       subscribe,
       unsubscribe,
     }}
   >
     {children}
   </SensorContext.Provider>
 );
};
 
export const useSensor = () => useContext(SensorContext);
 
 
APIScreen
 
import React, { useState, useContext } from 'react';
import { View, Text, Button, TextInput, ScrollView, StyleSheet, ActivityIndicator } from 'react-native';
import { useApi } from './ApiContext';
 
const ApiScreen = () => {
 const {
   randomQuote,
   searchedQuotes,
   updatedData,
   loading,
   error,
   getRandomQuote,
   searchQuotes,
   simulatePutRequest,
 } = useApi();
 
 const [searchQuery, setSearchQuery] = useState('');
 
 return (
   <ScrollView contentContainerStyle={styles.container}>
     <Text style={styles.title}>API Integration Demo</Text>
 
     {/* GET Request Section */}
     <View style={styles.section}>
       <Text style={styles.sectionTitle}>GET Random Quote</Text>
       <Button title="Get Random Quote" onPress={getRandomQuote} />
       {loading && randomQuote === null ? (
         <ActivityIndicator size="small" />
       ) : randomQuote ? (
         <View style={styles.quoteContainer}>
           <Text style={styles.quoteText}>"{randomQuote.content}"</Text>
           <Text style={styles.quoteAuthor}>- {randomQuote.author}</Text>
         </View>
       ) : null}
     </View>
 
     {/* POST Request Section */}
     <View style={styles.section}>
       <Text style={styles.sectionTitle}>POST Search Quotes</Text>
       <TextInput
         style={styles.input}
         placeholder="Enter search term"
         value={searchQuery}
         onChangeText={setSearchQuery}
       />
       <Button
         title="Search Quotes"
         onPress={() => searchQuotes(searchQuery)}
         disabled={!searchQuery.trim()}
       />
       {loading && searchedQuotes.length === 0 ? (
         <ActivityIndicator size="small" />
       ) : searchedQuotes.length > 0 ? (
         <View>
           {searchedQuotes.map((quote, index) => (
             <View key={index} style={styles.quoteContainer}>
               <Text style={styles.quoteText}>"{quote.content}"</Text>
               <Text style={styles.quoteAuthor}>- {quote.author}</Text>
             </View>
           ))}
         </View>
       ) : null}
     </View>
 
     {/* PUT Request Section */}
     <View style={styles.section}>
       <Text style={styles.sectionTitle}>PUT Update Data</Text>
       <Button title="Simulate PUT Request" onPress={simulatePutRequest} />
       {loading && !updatedData ? (
         <ActivityIndicator size="small" />
       ) : updatedData ? (
         <View style={styles.updatedDataContainer}>
           <Text>Status: {updatedData.status}</Text>
           <Text>Message: {updatedData.message}</Text>
           <Text>Updated At: {updatedData.updatedAt}</Text>
         </View>
       ) : null}
     </View>
 
     {error && <Text style={styles.error}>{error}</Text>}
   </ScrollView>
 );
};
 
const styles = StyleSheet.create({
 container: {
   padding: 20,
 },
 title: {
   fontSize: 24,
   fontWeight: 'bold',
   marginBottom: 20,
   textAlign: 'center',
 },
 section: {
   marginBottom: 30,
   padding: 15,
   borderWidth: 1,
   borderColor: '#ddd',
   borderRadius: 5,
 },
 sectionTitle: {
   fontSize: 18,
   fontWeight: 'bold',
   marginBottom: 10,
 },
 input: {
   height: 40,
   borderColor: 'gray',
   borderWidth: 1,
   marginBottom: 10,
   paddingHorizontal: 10,
 },
 quoteContainer: {
   marginTop: 10,
   padding: 10,
   backgroundColor: '#f9f9f9',
   borderRadius: 5,
 },
 quoteText: {
   fontStyle: 'italic',
   marginBottom: 5,
 },
 quoteAuthor: {
   fontWeight: 'bold',
   textAlign: 'right',
 },
 updatedDataContainer: {
   marginTop: 10,
   padding: 10,
   backgroundColor: '#e6f7ff',
   borderRadius: 5,
 },
 error: {
   color: 'red',
   marginTop: 10,
   textAlign: 'center',
 },
});
 
export default ApiScreen;
 
 
SensorScreen.js
 
import React, { useContext } from 'react';
import { View, Text, StyleSheet } from 'react-native';
import { useSensor } from './SensorContext';
 
const SensorScreen = () => {
 const { accelerometerData } = useSensor();
 
 return (
   <View style={styles.container}>
     <Text style={styles.title}>Accelerometer Data</Text>
     <View style={styles.dataContainer}>
       <Text style={styles.dataText}>X: {accelerometerData.x.toFixed(2)}</Text>
       <Text style={styles.dataText}>Y: {accelerometerData.y.toFixed(2)}</Text>
       <Text style={styles.dataText}>Z: {accelerometerData.z.toFixed(2)}</Text>
     </View>
     <Text style={styles.note}>
       Move your device to see the accelerometer values change
     </Text>
   </View>
 );
};
 
const styles = StyleSheet.create({
 container: {
   flex: 1,
   justifyContent: 'center',
   alignItems: 'center',
   padding: 20,
 },
 title: {
   fontSize: 24,
   fontWeight: 'bold',
   marginBottom: 30,
 },
 dataContainer: {
   width: '100%',
   padding: 20,
   backgroundColor: '#f0f0f0',
   borderRadius: 10,
   marginBottom: 20,
 },
 dataText: {
   fontSize: 18,
   marginVertical: 5,
 },
 note: {
   fontSize: 14,
   color: '#666',
   textAlign: 'center',
   marginTop: 20,
 },
});
 
export default SensorScreen;
 
 
 
APP.JS
 
 
import React from 'react';
import { NavigationContainer } from '@react-navigation/native';
import { createBottomTabNavigator } from '@react-navigation/bottom-tabs';
import { ApiProvider } from './ApiContext';
import { SensorProvider } from './SensorContext';
import ApiScreen from './ApiScreen';
import SensorScreen from './SensorScreen';
 
const Tab = createBottomTabNavigator();
 
export default function App() {
 return (
   <ApiProvider>
     <SensorProvider>
       <NavigationContainer>
         <Tab.Navigator>
           <Tab.Screen name="API Demo" component={ApiScreen} />
           <Tab.Screen name="Sensor Data" component={SensorScreen} />
         </Tab.Navigator>
       </NavigationContainer>
     </SensorProvider>
   </ApiProvider>
 );
}
 
Index.js
 
import { registerRootComponent } from 'expo';
 
import App from './App';
 
// registerRootComponent calls AppRegistry.registerComponent('main', () => App);
// It also ensures that whether you load the app in Expo Go or in a native build,
// the environment is set up appropriately
registerRootComponent(App);
 